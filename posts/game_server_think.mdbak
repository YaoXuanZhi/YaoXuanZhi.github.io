- 本人希望的服务器框架是如何？
	- 客户端和服务器的热更都是比较全面的，现今c# 6.0本身自带热更新机制，在rider和vs上都能直接用上，netcore项目的支持都已经完善了，作为服务器开发是非常方便的，后续可以专门说下这块机制的实现，本项目遇到的实现
	- 按照现在的游戏客户端的实现机制，我们其实可以为游戏服务器开启一个web debug窗口，做Model开发的同学可以直接在浏览器上搞个protobuff mock的页面，并且结合当前项目情况，将具体的协议请求来进行分发，当然，这个是因为我们目前的设计有关，采取了各种ModelEty的实现方式来实现的，protobuff下需要如何设计呢？
		- [protobuf-webui](https://kandi.openweaver.com/python/Groterik/protobuf-webui)
		- [protobuf-webui github](https://github.com/Groterik/protobuf-webui)
		- [how-to-visualize-data-from-google-protocol-buffer](https://stackoverflow.com/questions/6032137/how-to-visualize-data-from-google-protocol-buffer)
	- 支持client host方式，也就是当前项目里的内建服务器模式，此时当前client就是作为单机模式来跑，并不是联网模式，不过它也可以作为其它client的服务器，这种用来做局域网对战游戏是非常爽的，可以搞些手机对战游戏，做家庭聚会比较不错，感觉会蛮不错的
- 做下不同语言栈下对于Actor通讯模型的实现原理，以及使用方式，是否足够别扭？
	- Actor模型的消息是如何调度的？这个邮箱是谁来管？每个Actor下都有一个MailBox，怎么处理它
	- Actor模型的机制，是怎么迭代出来的，怎么发现其它Actor的地址？
	- Actor之间的消息是如何分发的？
	- 分别对Erlang Opt、Skynet、ET这三个网络框架进行分析，以及探究，它们是如何基于基于这些预构建好的网络模型，基于所采用的编程语言，搭建自己所属业务的
- 帧同步服务器比状态同步服务器简单多了
	- 帧同步游戏中，其服务器主要做的事情就是进行操作命令同步，然后将战斗结果上传到结算服务器上进行验证发放奖励，服务器本身并不参与到战斗逻辑开发上，一般，客户端开发的部分也会跑到验证服务器上，是同一套逻辑来的，这块已经做好了切割，实际表现上就是服务器只会保存客户端的结算产出以及养成系统数据，一般会包含联网模式和非联网模式，会有一个逻辑服之类的概念，实际上就是client配置的远程备份，可以基于这个特性，实现一个client-host的模式，局域网对战游戏之类的也不错
		- 联网模式下，单局的对战时间不宜过长，一般30分钟内就行了，这种基本都是Moba类游戏了，类似王者荣耀之类的，强调手感的游戏一般都是采取它
		- 一般在重客户端类型游戏里面常用
		- 结算验证服，一般也叫做战斗服，能跑客户端童鞋编写的完整战斗逻辑，假设客户端能跑60fps，那这个验证服就需要跑20fps了
		- 逻辑服则是纯RPC通讯
		- 棋牌类游戏也是这样的
		- 这种游戏的服务器技术难度在：
			- 架构设计需要根据游戏做好定制
			- 发送排行榜奖励的时候，需要设计好邮箱的发送逻辑，这种游戏逻辑服的逻辑比较简单，可以容纳几十万同时在线玩家，排行榜发奖的时候，就会出现这种卡顿的情况，所以一般会加个邮局之类的东西，将玩家到邮局领奖，过期则自动清除
		- 自动重连的时候，是从进游戏的首帧开始计算的，然后重新运算到当前帧
	- 状态同步游戏中，服务器有战斗里面所有逻辑，客户端实际上就是服务器的表现层，这种游戏对客户端要求比较低，大部分就是做一些ui上的各种表现，但是服务器去的开发要求就会比较高了，因为战斗上面的机制也是需要服务器童鞋去进行开发，尤其是各种跨服部分的玩法，这块客户端童鞋是无感的，但是服务器童鞋的开发难度就会比较大，比如服务间的通讯流、各种战斗间产出的消息的分发流程必须对此足够熟悉，游戏体验一般，但是对数值体验要求会比较高，传奇类、仙侠类游戏的需求就是会比较大，还有一些MMORPG、ARPG之类的都是如此
		- 如果战斗逻辑较为复杂，可能还会拆分成战斗服、场景服之类的，用来减少各种卡顿情况，而且网关一般也是会有的
		- 这种走的不是DAU高的途径，单服活跃有限，一般也就几千号人，然后就拉到新服了，所以本服排行榜发奖之类的逻辑一般不需要多注意，但是难点在跨服排行榜奖励之类的设计，以及相关玩法的结算
		- 自动重连的时候，是将状态直接恢复的
- 查看好友信息之类的功能 ，需要好好设计，比如生成在一个ShadowPlayer的玩家，如果有人查看了，就启动这个进程，过半个小时之后再回收，这段时间如果该玩家登录了，那就切换成正式状态
- 难怪游戏服务器的面试，一边无非问些服务器八股文，业务相关的就是问好友、邮箱、发奖逻辑、任务系统、成就系统、排行榜设计、聊天之类的，其它战斗相关的，就是各种状态同步的设计思路，一般也就加个longTime来做个伤害skip处理，关键还是游戏服务器同游戏类型是强绑定的，换个游戏类型的话，其消息调度以及设计就会有很大不同了，比如各种buff、技能之类的设计都是服务器在处理的，并且涉及到相关的伤害计算调度，这种东西在帧同步游戏里是不需要的
	- 当然游戏服务器并不只有这些工作，还有相当一部分是做运维，类似部署开服、合服、协助运营童鞋等工作，以及修复线上bug等工作，这些事情，基本都是主程、和核心程序在搞，其它的，工作内容上就集中在游戏内容开发上了
	- sproto没必要，就采用protobuff，它的专用没有节省多少成本，反而引入了其它问题，没必要宠着这些大牛
	- 感觉我也有成长了，视野开阔带来的好处是真的大 `><`
- web服务器和游戏服务器的区别
	- 两个不同的技术栈，都有相当的深度，总体来说，游戏服务器的难度更大，因为同游戏类型紧密联系，能通用的东西很少，一些网络拓扑上的设计可以通用，但是普适性不高，基本都要改
	-

 - [SLG服务器框架设计说明](https://blog.csdn.net/weixin_46469210/article/details/130397762)
 - [腾讯游戏学院------SLG游戏技术【笔记】](https://blog.csdn.net/packdge_black/article/details/115468421)
 - [天美干货分享：怎么解决大地图SLG的技术痛点？](https://youxiputao.com/article/24673)
 - [题外话：计算密集型 vs IO密集型](https://www.cnblogs.com/unqiang/p/9516590.html)
 - [netick - 一个非托管内存实现的网络库，自带了状态同步等Demo](https://netick.net/docs/1/index.html)
  - [dungeon-frenzy - 一个社区成员制作的Rouglike游戏Demo](https://github.com/StinkySteak/dungeon-frenzy)


### SLG的服务器难点
 - 无缝大地图实现
 - AOI分层优化
 - 寻路机制支持

### 针对游戏里的场景抽象来说，我们以现实那个东西来作为抽象呢？
比如一个OpenGL程序，或者一个Qt Framework，QGraphicScene、QGraphicView这个区别，一个QGraphicScene可以被多个QGraphicView加载和显示呢

那作为一个游戏而言，我们应该怎么做呢？一款棋牌项目，它应该是按照房间来划分的，对于一个Moba，其实也是一个房间来的，一个副本也是一个房间，感觉这种抽象比较通用，每个房间里有各种关卡
在MMO里，一般有一个野外场景，这上面会跑很多新手玩家，定期会合服，然后会有副本玩法、一些跨服PVP玩法、拍卖行之类的

MMO类型
粒度划分：
 - 场景：野外、副本
 - 公共服务：拍卖行、排行榜、邮件：单服排行榜一般不存在问题，因为数据量不大，纵使单服1w以上，其实数据量也不多，对于全区全服的项目而言，由于玩家人数可能超过100w，那么此时肯定不能全排序了，而是尽快找到插入位置，并且更新最新的排行榜了，思路是空间换取时间，用跳跃表来实现，跳跃表实际上是一个多层有序链表，最底层链表包含了所有玩家的积分，在其之上的逐层链表元素按2^n次方减少，其将作为二分查找的依据
  假设跳跃表有3层，那么1/2^3、1/2^2、1/2
 - 单服、跨服
 - 逻辑服：管理玩家登录、登出、各种玩家系统功能的实现
 - 场景服：可能有可能没，一般单服都是放在逻辑服上的，减少数据交互，如果是跨服战斗，那么在玩法活动参与的时候，会有一个登录操作，从LogicMgr上获取到玩家角色数据，然后基于此创建一个场景玩家单位，让这个单位在场景上登录即可，这里采用的是状态同步机制，客户端就是服务器的表现层而已，战斗逻辑都在服务器上

### 服务发现机制
https://alexstocks.github.io/html/etcd.html

### 全区全服和分区分服的思考
https://blog.csdn.net/weixin_43679037/article/details/125546079
https://blog.csdn.net/weixin_43679037/article/details/124263553
https://blog.antsmallant.top/2024/08/20/game-study-4-new-way-to-dev-seperate-svr
https://blog.antsmallant.top/2024/05/01/gamesvr-practice-1-single-zone-arch

https://blog.antsmallant.top/

https://blog.antsmallant.top/2016/01/01/redis-note-1-knowledge
https://blog.antsmallant.top/2022/06/02/gamesvr-note-1-aoi