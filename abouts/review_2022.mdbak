---
title: 回顾2022
date: 2022-12-30
password: yaoxuanzhi-root
message: 自留地，仅本人可见
categories:
- 个人向
code:
  maxShownLines: 11
---

## 项目回顾

- 按照目前的项目节奏，预计2023年中旬可以上线的事情，铁定是可以告吹了，排骨作为一个更有经验的老司机，提桶跑路也是正常的，项目周期太长，项目进展又慢，二级管理有辣么多，推进一些事情阻力重重，说项目在悬崖边上确实不为过
- 就我本人的判断而言，这个项目本身的风险确实很大，成功几率极低，但是上线的品质肯定不会被人说是换皮之类的，相关机制也是有一些亮点的，项目是一个好项目，但是能不能等到它上线、看到它成功呢，这个很难说
- 武汉总部的大Boss那边预估今年，整个集团人数会拓展到1k人左右，企业文化之类的肯定会比稀释，进来一些不三不四的人也是正常的，需要引入统一的管理，现在安排行政童鞋那边看下大伙的工时以及所做的东西，然后做一些人员精简的行动
- 企业是不养闲人的，安排好自己的事情，保质保量完成既定任务，并且结合项目实际情况，持续学习新知识，并且反哺到项目之中，也是挺好的事情，作为组长，身临前线去进行业务开发，让组员太过闲肯定是不及格的，但是我希望的是，每个成员，每个季度都能有所成长，无论是见识上，还是工作之外的成长，都能够继续长进，对自己的职业生涯负责。无论成功与否，愿我们不虚此行

## 家庭回顾
 - 智能家居相关
 - 卧室布局相关
 - 照明系统相关
 - 网络（含Nas）部署相关
 - 备案价格查询
   - [当地住建局网站](http://jianshe.maoming.gov.cn/zwfw/index.html)

## 项目交接流程梳理
这是我作为一个小管理头次遇到的组员离职事情，这里特意记录下一些处理步骤：

<details>
<summary>项目交接流程</summary>

- 项目交接的场景：
  - 由于同事离职，将工作交接给自己。
  - 由于自己离职，将工作交接给同事。  
  - 由于项目变动，将工作交给其他项目组。  
- 如果你做为一个程序员，在业务不熟悉的情况下，需要考虑哪些事项呢？
- 项目源码相关注意点：
  - 将开发人员最后修改的代码提交
  - 确定项目源码
  - 确定项目对外 API
  - 确定项目定时脚本
  - 确定项目日志查看平台
  - 开通 SVN 的权限
  - 开通 GIT 的权限
  - 了解上线部署流程
  - 了解代码规范。 
- 数据库相关注意点：
  - 相关数据库与数据表结构
  - 查看是否有未注释的库名、表名、字段名，将其确定
  - 最好了解每一个数据库、表、字段的意义，更新到文档
  - 最好将每一个表涉及到哪一个模块进行确认，更新到文档
- 开发环境相关注意点：
  - 本地开发环境配置
    - 在自己本地电脑上配置环境，将项目在自己机器上运行成功
    - 确认是否有其他的扩展，如需账号、端口，记得做记录
  - 测试环境
    - 开通测试账号
  - 预上线环境
    - 开通预上线环境账号
	- 确定预上线环境的域名地址，是否需要指定的 Host 等等
  - 正式环境
  - 开通正式环境账号
- 对接人相关注意点：
  - 确定测试对接人
  - 确定产品对接人
  - 确定项目跨部门对接人
  - 确定运维和 DBA 对接人
- 文档相关注意点：
  - 确定每一期的产品需求文档，PRD 文档
  - 确定每一期的测试覆盖文档，单元测试文档，遗留 Bug
  - 确定每一期的产品人员，开发人员，测试人员
  - 确定代码中的坑、梳理过的流程图、设计框架图
  - 确定每一期的开始开发时间，提测时间，上线时间
  - 了解相关程序风险，遗留问题等
  - 文档越多越好，未必会看，但留着备用总是好的
  - 最好能邀请一个会议进行交接，叫上相关产品、开发、测试
- 职业道德：
  - 不要带入个人情绪，个人恩怨
  - 要实现毫无保留的完成项目交接
  - 组织一个会议进行项目交接，对于交接人员提出的问题，仔细逐一讲解、解答
  - 交接单以交接人员签字确认为准，不要浮于形式，要走心
- 备注：
  - 最好能在员工提离职的时候就开始项目交接，而不是员工走的时候再做交接
  - 离职要提前与上级领导沟通，给领导留出找对接人的时间
  - 交接过程中遇到有疑问的地方，一定要确认清楚，做好记录
</details>



<details>
<summary>系统组年度总结</summary>
	- 工作总结重点业绩
		- 组织去bolt化的工作
		- 接入ET框架后，组织对系统内容的ET化改造
		- 组织采用UGUI新框架后的客户端业务迁移
	- 年度工作亮点
		- 在系统内容ET化过程中，基于版本开发排期的考虑，尽可能地将ET化的过程更加贴合我们已有的开发流程和习惯，降低迁移成本
		- 与石头一起不断迭代UGUI下的客户端开发流程，并且同组员一起引入一些新框架下的配套工具，如Psd2Ugui、UGUI-Editor等
	- 不足分析
		- 目前兼顾了管理和开发，精力比较分散，工作内容深度还有得提高
		- 行业经验不足，对于很多表现效果的实现思路缺少积累和沉淀，很多时候小组还是需要去探索实现思路，分析业界其它类似效果的制作工艺，面临的技术难题还是有一些的
	- 团队管理
		- 引入或改善工具或流程，不断提升开发流程效率
		- 系统内容在多个技术迭代过程中，有很多历史遗留代码，团队成员的代码风格各异，需要进行统一，组织每周Code Review，整理业务开发的最佳实践
	- 人才梯队建设
		- 收集组员的技术偏好，在后续任务分配的时候，结合任务排期，将一些经验短板任务分配给他们跟进，并在完成之后做经验分享
		- 整理小组内消化的卡点需求，将相关需求分析和解决思路都在内网文档上做分享，作为相关经验积累
	- 个人成长与能力提升
		- 当下兼顾了管理和一线开发，对工作统筹的要求高了一截，目前在工作安排、跨部门沟通上面有一定进步，比起刚开始的时候顺畅了一些
		- 参与到部门的一些技术方案的迭代中，各种技术选型分析、讨论和落地风险也做了多次，技术上也更加自信了，这可能也得益于技术视野的开阔
	- 工作状态
		- 由于各种排期、版本节点压力，一些参与深度讨论、想去做的、需要占用大量时间的事情，基本分出给组员去消化了，自己做的工作则较为琐碎，得改变
		- 对于团队上里一些效果的探索性工作感觉过于被动，经过分析之后，归因为缺少该方向的积累和沉淀，后续人手充足之后，安排人手去解决它
		- 不可控的东西有点多，技术方案迭代、新需求插入，疫情影响等等，在不可控中寻求可控的时间节点，感觉很难
	- 发现的问题及改善建议
		- 服务器配套的建立和相关开发技术人员需要尽快配齐了，尽早将项目运营期开发所需的配套给完善了
- 明年规划
	- 重点工作规划对应举措
		- 平滑过渡到新的技术框架下，并完善配套工具和流程
			- 当下小组成员客户端偏多，做一些系统玩法的后端也是能胜任的，但是在即将推进的工作中，纯服务器相关内容逐渐多了起来，需要更多一些专职服务器童鞋一起消化这些需求，并将对应的服务器配套持续完善迭代
		- 梳理UI框架下3d美术效果复刻方案的技术储备流程
			- 同策划童鞋一起收集整理上面上的各种负责的UI美术效果，生成复刻需求，在工期允许的时间下，安排组员轮值复刻这些美术表现
			- 由于各种3d UI效果，对性能要求较高，还需要安排童鞋专门做UI性能热点分析
		- 梳理堆量时的系统需求并行开发流程以及组员工作安排
		- 在新框架下，梳理完纯服务器功能开发和维护流程
	- 所需公司资源及跨部门协作
		- 行政部
			- 预计一名高级客户端童鞋，做美术效果制作方案的储备
			- 预计一名中级/高级的服务器童鞋，一起来将服务器配套完善
		- PM部&策划部&程序部&美术UI
			- 沟通各个需求的版本节点，开发内容交叉依赖的进度排期- 同熊猫聊了一下，听下各自的心里话
- 认为这边做计划做排期的时间太长了，不靠谱，在以往接触到的项目里，做一个月的排期就很难了
	- 当然，已知的有神仙道、问道，还有网易的某些项目组，也是会储备一个3个月的大版本内容，但是市面上确实很少
	- 有种随时脱轨的感觉，一边在不断堆着内容，一边在做底层程序架构调整，而且做的改造事情，很多时候又因为工期原因没办法做彻底
	- 感觉现在还是在做一个玩具、一个Demo，离真正的商业化还差很远
- 关于RobotCase的实现思路
	- 当下项目里采用ModelEty来自动同步这些数据，client是可以知道服务器的某些数据的，这样可以提前构建好所需的条件，然后进行开发就行
	- 熊猫的看法是：进行某些操作之前，先通过Gm构建即将进行请求的测试环境，然后下发协议请求，判断请求的错误码就行了
		- 其实数据前后端分离，客户端也不需要知道服务器的数据，通过Gm指令来准备好各种所需指令就行了，所需的context也不是一个必须的东西
		- 也给我讲解了下，他以前项目里，按照这个思路也是能搞起服务器测试用例的，未必比之前子畅设计的那套东西差多少
	- 熊猫以前在千古风流（端游）的时候，那边做到过单服2w同时在线的情况，并且还有千人同屏在线的问题
		- 以他的经验判断和观察，我们这边的战斗逻辑，需要推翻重做，但是又有各种排期之类的压力在前面顶着，他判断，按照ET框架的AI框架写法，也是可以胜任这块逻辑的，目前项目的战斗逻辑实际上没有比MMO游戏的战斗层复杂多少，归根到底，是一个信任问题，如何说服老板给这个时间去做这个事情，很难，各种时间节点卡住了，又没办法做彻底，做起来很难受，他个人也是想一下子做到完美的人，所以总体来看，确实很麻烦
		- 排查过一个千人活动的时候，每次聚集在某个地方的时候，CPU会疯狂跑到100%，挂掉，当时排查这个问题的时候，就是利用机器人，模拟1000多个真实玩家跑到某个地方，然后将问题复现了，经过排查之后，发现是策划给这个不分线的大场景上，将AOI的检测范围配置得很大，导致位置广播量太多
		- 还能在玩家创新号的时候，搞两个模拟玩家一起陪同玩家做任务，让该服显示的更加活跃
		- RobotAI，可以做到
- 就开源项目商业化这个事情谈了下
	- 一起吐槽了下，国内大厂的开源项目半死不活的状况，我个人比较推崇的是RapidJson的作者叶劲峰老哥还在不断维护这个开源项目，其它的大多数都是停止状态，沦为了发起者的述职晋升工具；不过国内最成功的应该是TiKV了，确实商业化和落地都做得不错
	- QFramework作者，在相关技术群里，招些感兴趣的群员，给他们一套视频教程播放，然后在课堂上回答学员的问题，也可以挣点小钱
	- YouYouFramework作者，录制了初、中、高级的视频教程，免费发布到网络上，然后在实战上进行收费
	- 熊猫的意思是，与字母哥那边做差异，字母哥那边集中在ET框架的使用层面讲解，他会做出区分，会集中在为啥这样设计上，后续招学员，也是走类似QFramework的方式，主要是在小白群体上进行授课，应该能挣点小钱；另外，还会参考类似Hylibrid的作者那样做企业咨询；总之，比在企业里，各种工期、排期追着屁股来问自在些
	- 我表达了下，希望国内的开源作者都能从中盈利，不断提升开源社区的各种氛围
- 关于程序各个板块的看法
	- ta和系统这边没必要推翻重做，但是战斗逻辑层认为要推倒重来才可能上线，对于这块我是存疑的，经验不足，无法判断
	- 相比MMO，系统组所负责的系统功能数量是少很多的，压力大部分在战斗那边

</details>

优秀的行业前辈
为什么大部分码农做不了软件架构师？ - sealyaog的回答 - 知乎
https://www.zhihu.com/question/36658435/answer/3258754473